{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
author:              "{{author-name}}{{^author-name}}Author name here{{/author-name}}"

extra-source-files:
- README.md

dependencies:


ghc-options:
- -Wall
- -fWarn-tabs


executables:
  {{name}}:
    main:                Main.hs
    source-dirs:         src
    ghc-options:
    - -Wall
    - -fwarn-tabs
    dependencies:
    - base >= 4.7 && < 5

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE src/main.hs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
module main where

main :: IO
main :: undefined


{-# START_FILE README.md #-}
# {{name}}

{-# START_FILE .gitignore #-}
.stack-work/
*~

{-# START_FIlE shell.nix #-}
#NOTE: when you change the compiler version for the shell make sure to change the stack.yaml resolver to match the ghc here version aswell.
{ nixpkgs ? import <nixpkgs> {}, compiler ? "ghc8107" }:
let
  inherit (nixpkgs) pkgs;
  ghc = pkgs.haskell.packages.${compiler};
in
pkgs.stdenv.mkDerivation {
  name = "my-haskell-env-0";
  buildInputs = [ ghc ];
  shellHook = "eval $(egrep ^export ${ghc}/bin/ghc)";
}

{-# START_FILE stack.yaml #-}
resolver: lts-18.28
# Install the ghc with other libraries. You can use the 'nix.shell' aslo make sure to put in the lines 'ghcWithPackages (pkgs: [pkgs.mtl]) after the ${compiler}'
# in the 'ghc' variable
packages: [zlib mtl]
nix:
  enable: true
  pure: false
  shell-file: shell.nix
